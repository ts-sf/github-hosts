name: Attach binaries to a release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      bin_tag:
        description: "repo tag to build from"
        type: string
        required: true

env:
  TAG_NAME: "${{ github.event.inputs.bin_tag || github.ref }}"
  # Disable incremental compilation.
  #
  # Incremental compilation is useful as part of an edit-build-test-edit cycle,
  # as it lets the compiler avoid recompiling code that hasn't changed. However,
  # on CI, we're not making small edits; we're almost always building the entire
  # project from scratch. Thus, incremental compilation on CI actually
  # introduces *additional* overhead to support making future builds
  # faster...but no future builds will ever occur in any given CI environment.
  #
  # See https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
  # for details.
  CARGO_INCREMENTAL: 0
  # Allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). This should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short
  TMP_BUILD_DIR: "./tmp/release"

jobs:
  release-build:
    name: Build & Publish Binaries
    timeout-minutes: 80
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Clean up and validate ${{ env.TAG_NAME }} tag name
        shell: bash
        run: |
          export bin_tag=$(echo ${{ env.TAG_NAME }} | sed s/'refs\/tags\/'//)
          [[ "${bin_tag}" == "main" ]] && echo "tag cannot be equals to 'main'" && exit 1
          echo "bin_tag=${bin_tag}" >> $GITHUB_ENV

      - name: Set os/arch variables (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        shell: bash
        run: |
          export arch=$(uname -m)
          export os_type="windows-${arch}"
          echo "os_type=${os_type}" >> $GITHUB_ENV
          echo "extention=$(echo ".exe")" >> $GITHUB_ENV

      - name: Set os/arch variables
        if: ${{ matrix.os != 'windows-latest' }}
        shell: bash
        run: |
          export arch=$(uname -m)
          export system_os=$(echo ${{ matrix.os }} | cut -d- -f1)
          export os_type="${system_os}-${arch}"
          echo "os_type=${system_os}-${arch}" >> $GITHUB_ENV

      - name: Check out ${{ env.bin_tag }}
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # pin@v3
        with:
          ref: ${{ env.bin_tag }}

      - name: Cargo build for ${{ matrix.os }} platform
        shell: bash
        run: |
          [ -f ~/.cargo/env ] && source ~/.cargo/env ; cargo build --release

      - name: Rename binaries for ${{ matrix.os }}
        shell: bash
        run: |
          mkdir -p ${{ env.TMP_BUILD_DIR }}

          [ -f ./target/release/hosts${{ env.extention }} ] && mv ./target/release/hosts${{ env.extention }} ${{ env.TMP_BUILD_DIR }}/hosts${{ env.extention }}
          [ -f ./target/release/dns-forward${{ env.extention }} ] && mv ./target/release/dns-forward${{ env.extention }} ${{ env.TMP_BUILD_DIR }}/dns-forward${{ env.extention }}

          tar -cvzf ./tmp/${{ env.bin_tag }}-${{ env.os_type }}.tgz -C ${{ env.TMP_BUILD_DIR }} .

      - name: Attach artifacts to ${{ env.bin_tag }} release in GH
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # pin@v1
        with:
          tag_name: ${{ env.bin_tag }}
          files: |
            ./tmp/${{ env.bin_tag }}-${{ env.os_type }}.tgz
